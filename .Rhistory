library(rgdal)
library(sf)
library(readxl)
library(ggplot2)
library(plotly)
library(leaflet)
library(tidyr)
setwd("~/")
# Extract TX map data for plotting
map_data <- readOGR(dsn = "GitHub/cprit_2020/Analysis/Shapefile Geographic Data/Texas_Counties")
# Extract TX data regarding 1995 lung cancer SIR's
county_SIRs <- read_excel("GitHub/cprit_2020/Analysis/Clean Data for Plots/County SIRs All Years.xlsx")
View(county_SIRs)
View(county_SIRs)
#Reshape to prep the data over time to be merged with the map data
county_SIRs <- data.frame(county_SIRs)
wide_SIRs <- reshape(county_SIRs,
timevar = "Year",
idvar = "County_Code",
direction = "wide")
wide_SIRs[1:2,]
#Merge two datasets
tx_SIR_map <- merge(map_data, wide_SIRs, by.x = "FIPS_ST_CN", by.y = "County_Code")
#Convert to sf object for plotting
tx_SIR_map_sf <- st_as_sf(tx_SIR_map)
tx_SIR_map_sf <- gather(tx_SIR_map_sf, Year, SIR, paste0("SIR.", c(1995, 2000, 2005, 2010, 2015)))
tx_SIR_map_sf$Year <- as.integer(substring(tx_SIR_map_sf$Year, 5, 8))
#SIR's over time across counties
plot1 <- ggplot(tx_SIR_map_sf) + geom_sf(aes(fill = SIR)) +
facet_wrap(~Year, dir = "h", ncol = 3) +
ggtitle("SIR's Over Time") + theme_bw() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
) +
scale_fill_gradient2(midpoint = 1, low = "blue", mid = "white", high = "red")
plot1
#Time Plot of SIR's
plot2 <- ggplot(county_SIRs, aes(x= Year, y = SIR,
group = County_Code, color = County_Code)) +
geom_line() + geom_point(size = 2) + theme_bw() + theme(legend.position = "none")
plot2 <- ggplotly(plot2)
plot2
#### INLA MODELING ####
library(INLA)
library(spdep)
#Create a neighborhood matrix
tx_nb <- poly2nb(tx_SIR_map)
nb2INLA("tx_SIR_map.adj", tx_nb)
tx_g <- inla.read.graph(filename = "tx_SIR_map.adj")
#Prep for INLA by completing the dataset
colnames(county_SIRs)[5] <- "Y"
colnames(county_SIRs)[4] <- "E"
county_SIRs$County_Code <- as.factor(county_SIRs$County_Code)
county_SIRs$idarea <- as.numeric(county_SIRs$County_Code)
county_SIRs$idarea1 <- county_SIRs$idarea
county_SIRs$idtime <- 1 + county_SIRs$Year- min(county_SIRs$Year)
county_SIRs$Y <- as.integer(county_SIRs$Y)
formula1 <- Y ~ f(idarea, model = "bym", graph = tx_g) +
f(idarea1, idtime, model = "iid") + idtime
res1 <- inla(formula1,
family = "poisson", data = county_SIRs, E = E,
control.predictor = list(compute = TRUE))
county_SIRs$RR <- res1$summary.fitted.values[, "mean"]
county_SIRs$LL <- res1$summary.fitted.values[, "0.025quant"]
county_SIRs$UL <- res1$summary.fitted.values[, "0.975quant"]
### Plots After INLA ###
tx_SIR_map_sf <- merge(tx_SIR_map_sf, county_SIRs,
by.x = c("FIPS_ST_CN", "Year"),
by.y = c("County_Code", "Year"))
plot3 <- ggplot(tx_SIR_map_sf) + geom_sf(aes(fill = RR)) +
facet_wrap(~Year, dir = "h", ncol = 3) +
ggtitle("SIR's Over Time After INLA Smoothing") + theme_bw() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
) +
scale_fill_gradient2(midpoint = 1, low = "blue", mid = "white", high = "red")
plot3
plot1
plot3
shiny::runApp('Research/CPRIT Research/Practice')
runApp('Research/CPRIT Research/Practice')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
shiny::runApp('Research/CPRIT Research/Practice')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
zeroes(10)
zeros(5)
rep(0,21)
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
c(1995:2015)
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp()
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
shiny::runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
shiny::runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
abline(c(1,2,3),c(1,2,3))
shiny::runApp('GitHub/cprit_2020/Visualizations/dashboard_1')
setwd("~/GitHub/cprit_2020")
# Extract TX map data for plotting
map_data <- readOGR(dsn = "Analysis/Shapefile Geographic Data/Texas_Counties")
library(rgdal)
library(sf)
library(readxl)
library(ggplot2)
library(plotly)
library(leaflet)
library(tidyr)
#Set working directory to GitHub folder
setwd("~/GitHub/cprit_2020")
# Extract TX map data for plotting
map_data <- readOGR(dsn = "Analysis/Shapefile Geographic Data/Texas_Counties")
# Extract TX data regarding 1995 lung cancer SIR's
county_SIRs <- read_excel("Analysis/Clean Data for Plots/Every Year 1995-2015/All by Hist Type.xlsx", sheet = 1)
#Reshape to prep the data over time to be merged with the map data
county_SIRs <- data.frame(county_SIRs)
wide_SIRs <- reshape(county_SIRs,
timevar = "Year",
idvar = "County_Code",
direction = "wide")
#Merge two datasets
tx_SIR_map <- merge(map_data, wide_SIRs, by.x = "FIPS_ST_CN", by.y = "County_Code")
#Convert to sf object for plotting
tx_SIR_map_sf <- st_as_sf(tx_SIR_map)
tx_SIR_map_sf <- gather(tx_SIR_map_sf, Year, SIR, paste0("SIR.", c(1995, 2000, 2005, 2010, 2015)))
tx_SIR_map_sf$Year <- as.integer(substring(tx_SIR_map_sf$Year, 5, 8))
#### INLA MODELING ####
library(INLA)
library(spdep)
#Create a neighborhood matrix
tx_nb <- poly2nb(tx_SIR_map)
nb2INLA("tx_SIR_map.adj", tx_nb)
tx_g <- inla.read.graph(filename = "tx_SIR_map.adj")
#Prep for INLA by completing the dataset
colnames(county_SIRs)[5] <- "Y"
colnames(county_SIRs)[4] <- "E"
county_SIRs$County_Code <- as.factor(county_SIRs$County_Code)
county_SIRs$idarea <- as.numeric(county_SIRs$County_Code)
county_SIRs$idarea1 <- county_SIRs$idarea
county_SIRs$idtime <- 1 + county_SIRs$Year- min(county_SIRs$Year)
county_SIRs$Y <- as.integer(county_SIRs$Y)
#Define the model
formula1 <- Y ~ f(idarea, model = "bym", graph = tx_g) +
f(idarea1, idtime, model = "iid") + f(idtime, model = "rw2")
#Run INLA
res1 <- inla(formula1,
family = "poisson", data = county_SIRs, E = E,
control.predictor = list(compute = TRUE))
names(res1)
res1$summary.random$idtime
plot(res1$summary.random$idtime$mean)
shiny::runApp('Visualizations/dashboard_1')
